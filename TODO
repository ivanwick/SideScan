- Change PacketStream so that it emits packets with the right datalink type,
  since this can be obtained via a call to
    int pcap_datalink(pcap_t *a)
    
- Change identifiers associated with PacketStream including the name of the
  class itself.
  
- Figure out whenever an int is being used, whether it would be more appropriate
  to use NSInteger or NSUInteger.

+ Change PacketIP to store an NSHost for the src and dst instead of
  a struct in_addr. (Ended up just making NSHost accessors instead.)
  
- Change initializers in the Packet class hierarchy to take advantage of late
  binding and dynamic typing, i.e. it may be possible for a direct init from
  PcapPacket to PacketTCP and passing self, instead of initializing temporary
  objects all the way down from PacketIP, PacketDatalink etc. (??)
  
+ Add methods to PacketIP for getting NSHost for src and dst address instead of
  a struct in_addr.
  
- Figure out the state of the TrafficAnalyzer code.
  Complete the TrafficAnalyzer class and debug.
  
- See if it would fit to use NSBitmapImageRep incrementalLoadFromData:complete:
  which returns NSImageRepLoadStatus, including such helpful enum vals as
    NSImageRepLoadStatusUnexpectedEOF   = -5,
    NSImageRepLoadStatusCompleted       = -6
  since we don't know if we have or will ever get a complete image data from
  captured traffic.

- Change the sweepConnections code to clean up FIN connections only when there
  is a single datablock, which means (as far as we know) there are no missing
  blocks.  Then after that resort to timeout.

- Maybe reorganize TrafficAnalyzer or specialize it for TCP traffic only?

Scanner modules:
- DNSResolverScanner to show what DNS names are being resolved.
- ImageScanner: each or a combination of
	PNGScanner
	JPGScanner
	GIFScanner
- HTTPAuthScanner to get digest passwords from HTTP requests

- Make a plugin interface out of the scanner modules

+ Fix PNGScan advanceByChunk _lastChunk code
- Unit tests for the above two items?

- Refactor image scanners.  Most of JFIFScann(er) was straight c&p from
  PNGScann(er).

+ Go over JFIFScan advanceToSOI code to make sure it's correct.
+ Check JFIFScanner -advanceToSOI to see if it needs to save the possible
  signature location when no data is left, so that the -advance loop can still
  terminate.  This is implemented in GIFScan so see that for reference.